// Place your key bindings in this file to override the defaultsauto[]
[
  {
      "key": "cmd+p",
      "command": "workbench.action.showAllSymbols"
  },
  {
      "key": "ctrl+t",
      "command": "-workbench.action.showAllSymbols"
  },
  {
      "key": "ctrl+t",
      "command": "workbench.action.quickOpen"
  },
  {
      "key": "cmd+t",
      "command": "-workbench.action.showAllSymbols"
  },
  {
      "key": "cmd+t",
      "command": "workbench.action.quickOpen"
  },
  {
      "key": "cmd+p",
      "command": "-workbench.action.quickOpen"
  },
  {
      "key": "cmd+t",
      "command": "workbench.action.quickOpenNavigateNextInFilePicker",
      "when": "inFilesPicker && inQuickOpen"
  },
  {
      "key": "cmd+p",
      "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
      "when": "inFilesPicker && inQuickOpen"
  },
  {
      "key": "alt+cmd+2",
      "command": "workbench.action.splitEditorRight"
  },
  {
      "key": "ctrl+-",
      "command": "-workbench.action.quickInputBack",
      "when": "inQuickOpen"
  },
  {
      "key": "ctrl+-",
      "command": "-workbench.action.navigateBack"
  },
  {
      "key": "ctrl+=",
      "command": "workbench.action.focusActiveEditorGroup",
      "when": "terminalFocus"
  },
  {
      "key": "ctrl+]",
      "command": "workbench.action.nextSideBarView",
      "when": "sideBarFocus"
  },
  {
      "key": "ctrl+[",
      "command": "workbench.action.previousSideBarView",
      "when": "sideBarFocus"
  },
  {
      "key": "cmd+n",
      "command": "workbench.action.terminal.new",
      "when": "terminalFocus"
  },
  {
      "key": "ctrl+shift+`",
      "command": "-workbench.action.terminal.new"
  },
  {
      "key": "cmd+e",
      "command": "-actions.findWithSelection"
  },
  {
      "key": "ctrl+e",
      "command": "workbench.action.toggleSidebarVisibility"
  },
  {
      "key": "cmd+b",
      "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
      "key": "ctrl+w",
      "command": "workbench.action.terminal.kill",
      "when": "terminalFocus && terminalProcessSupported"
  },
  {
      "key": "cmd+w",
      "command": "workbench.action.terminal.kill",
      "when": "terminalFocus && terminalProcessSupported"
  },
  {
      "key": "alt+cmd+down",
      "command": "workbench.action.terminal.focusNext",
      "when": "terminalFocus"
  },
  {
      "key": "alt+cmd+up",
      "command": "workbench.action.terminal.focusPrevious",
      "when": "terminalFocus"
  },
  // Starting Windows
  {
      "key": "ctrl+p",
      "command": "-workbench.action.quickOpen",
      "when": "!isMac"
  },
  {
      "key": "ctrl+t",
      "command": "-workbench.action.showAllSymbols"
  },
  {
      "key": "ctrl+t",
      "command": "-extension.vim_ctrl+t",
      "when": "editorTextFocus && vim.active && vim.use<C-t> && !inDebugRepl"
  },
  {
      "key": "ctrl+e",
      "command": "-extension.vim_ctrl+e",
      "when": "editorTextFocus && vim.active && vim.use<C-e> && !inDebugRepl"
  },
  {
      "key": "ctrl+e",
      "command": "-workbench.action.quickOpen"
  },
  {
      "key": "ctrl+b",
      "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
      "key": "ctrl+j",
      "command": "-extension.vim_ctrl+j",
      "when": "editorTextFocus && vim.active && vim.use<C-j> && !inDebugRepl"
  },
  {
      "key": "ctrl+j",
      "command": "-workbench.action.togglePanel"
  },
  {
      "key": "ctrl+a",
      "command": "-extension.vim_ctrl+a",
      "when": "editorTextFocus && vim.active && vim.use<C-a> && !inDebugRepl"
  },
  {
      "key": "ctrl+c",
      "command": "-extension.vim_ctrl+c",
      "when": "editorTextFocus && vim.active && vim.overrideCtrlC && vim.use<C-c> && !inDebugRepl"
  },
  {
      "key": "ctrl+v",
      "command": "-extension.vim_ctrl+v",
      "when": "editorTextFocus && vim.active && vim.use<C-v> && !inDebugRepl"
  },
  {
      "key": "alt+win+left",
      "command": "workbench.action.previousEditor"
  },
  {
      "key": "ctrl+pageup",
      "command": "-workbench.action.previousEditor"
  },
  {
      "key": "alt+win+right",
      "command": "workbench.action.nextEditor"
  },
  {
      "key": "ctrl+pagedown",
      "command": "-workbench.action.nextEditor"
  },
  {
      "key": "cmd+e",
      "command": "workbench.action.toggleSidebarVisibility"
  },
  {
      "key": "cmd+j",
      "command": "terminal.focus"
  },
  {
      "key": "ctrl+`",
      "command": "-workbench.action.terminal.toggleTerminal",
      "when": "terminal.active"
  },
  {
      "key": "cmd+j",
      "command": "-workbench.action.togglePanel"
  },
  {
      "key": "cmd+j",
      "command": "workbench.action.terminal.toggleTerminal"
  },
  {
      "key": "cmd+o",
      "command": "-workbench.action.files.openFile"
  },
  {
      "key": "ctrl+o",
      "command": "workbench.action.files.openFolder"
  },
  {
      "key": "ctrl+k ctrl+o",
      "command": "-workbench.action.files.openFolder"
  },
  {
      "key": "ctrl+o",
      "command": "-workbench.action.files.openFile"
  },
  {
      "key": "cmd+o",
      "command": "workbench.action.files.openFolder"
  },
  {
      "key": "cmd+k cmd+o",
      "command": "-workbench.action.files.openFolder"
  },
  {
      "key": "cmd+w",
      "command": "-workbench.action.closeGroup",
      "when": "activeEditorGroupEmpty && multipleEditorGroups"
  },
  {
      "key": "ctrl+k",
      "command": "workbench.action.focusActiveEditorGroup",
      "when": "terminalFocus"
  },
  {
      "key": "ctrl+k",
      "command": "-workbench.action.terminal.clear",
      "when": "terminalFocus && terminalProcessSupported"
  },
  {
      "key": "cmd+k",
      "command": "workbench.action.focusActiveEditorGroup",
      "when": "terminalFocus"
  },
  {
      "key": "cmd+k",
      "command": "-workbench.action.terminal.clear",
      "when": "terminalFocus && terminalProcessSupported"
  },
  {
      "key": "ctrl+o",
      "command": "-vscode-neovim.send",
      "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
      "key": "ctrl+o",
      "command": "-vscode-neovim.ctrl-o-insert",
      "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'"
  },
  {
      "key": "ctrl+a",
      "command": "-vscode-neovim.ctrl-a-insert",
      "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'"
  },
  {
      "key": "ctrl+a",
      "command": "-vscode-neovim.send",
      "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
      "key": "ctrl+a",
      "command": "-vscode-neovim.send",
      "when": "editorTextFocus && neovim.ctrlKeysInsert && neovim.recording && neovim.mode == 'insert'"
  },
  {
      "key": "ctrl+r",
      "command": "-vscode-neovim.send",
      "when": "neovim.mode == 'cmdline_insert' || neovim.mode == 'cmdline_normal' || neovim.mode == 'cmdline_replace'"
  },
  {
      "key": "ctrl+r",
      "command": "-vscode-neovim.send",
      "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
      "key": "ctrl+r",
      "command": "-vscode-neovim.send",
      "when": "editorTextFocus && neovim.ctrlKeysInsert && neovim.recording && neovim.mode == 'insert'"
  },
  {
      "key": "ctrl+r",
      "command": "workbench.action.reloadWindow"
  },
  {
      "key": "ctrl+r",
      "command": "-workbench.action.reloadWindow",
      "when": "isDevelopment"
  },
  {
      "key": "ctrl+r",
      "command": "-workbench.action.quickOpenNavigateNextInRecentFilesPicker",
      "when": "inQuickOpen && inRecentFilesPicker"
  },
  {
      "key": "ctrl+v",
      "command": "-vscode-neovim.send",
      "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
      "key": "ctrl+v",
      "command": "-notebook.cell.paste",
      "when": "notebookEditorFocused && !inputFocus"
  },
  {
      "key": "ctrl+f",
      "command": "-vscode-neovim.ctrl-f",
      "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
      "key": "ctrl+k",
      "command": "-vscode-neovim.send",
      "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
      "key": "ctrl+c",
      "command": "-vscode-neovim.escape",
      "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
      "key": "ctrl+c",
      "command": "-vscode-neovim.escape",
      "when": "editorTextFocus && neovim.ctrlKeysInsert && neovim.init && neovim.mode == 'insert'"
  },
  {
      "key": "ctrl+w",
      "command": "-vscode-neovim.delete-word-left-cmdline",
      "when": "neovim.mode == 'cmdline_normal'"
  },
  {
      "key": "ctrl+w",
      "command": "-vscode-neovim.send",
      "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
      "key": "ctrl+w",
      "command": "-vscode-neovim.send",
      "when": "editorTextFocus && neovim.ctrlKeysInsert && neovim.recording && neovim.mode == 'insert'"
  },
  {
      "key": "ctrl+w",
      "command": "-deleteWordLeft",
      "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'"
  },
  {
      "key": "ctrl+tab",
      "command": "workbench.action.nextEditor"
  },
  {
      "key": "ctrl+shift+tab",
      "command": "workbench.action.previousEditor"
  },
  {
      "key": "ctrl+shift+tab",
      "command": "-workbench.action.quickOpenNavigatePreviousInEditorPicker",
      "when": "inEditorsPicker && inQuickOpen"
  },
  {
      "key": "ctrl+shift+tab",
      "command": "-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup"
  },
  {
      "key": "ctrl+tab",
      "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
  },
  {
      "key": "ctrl+tab",
      "command": "-workbench.action.quickOpenNavigateNextInEditorPicker",
      "when": "inEditorsPicker && inQuickOpen"
  },
  {
      "key": "ctrl+j",
      "command": "-vscode-neovim.send",
      "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
      "key": "ctrl+j",
      "command": "-vscode-neovim.send",
      "when": "editorTextFocus && neovim.ctrlKeysInsert && neovim.recording && neovim.mode == 'insert'"
  },
  {
      "key": "ctrl+j",
      "command": "-editor.action.insertLineAfter",
      "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'"
  },
  {
      "key": "cmd+j",
      "command": "workbench.action.terminal.focus"
  },
  {
      "key": "ctrl+j",
      "command": "workbench.action.terminal.focus"
  },
  {
      "key": "ctrl+z",
      "command": "-vscode-neovim.send",
      "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
      "key": "alt+c",
      "command": "-workbench.action.terminal.toggleFindCaseSensitive",
      "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
  },
  {
      "key": "ctrl+n",
      "command": "workbench.action.terminal.new",
      "when": "terminalFocus"
  },
  {
      "key": "cmd+n",
      "command": "workbench.action.terminal.new",
      "when": "terminalFocus"
  },
  {
      "key": "ctrl+w",
      "command": "-extension.vim_ctrl+w",
      "when": "editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl"
  },
  {
      "key": "ctrl+f",
      "command": "-extension.vim_ctrl+f",
      "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
      "key": "shift+alt+f",
      "command": "-filesExplorer.findInFolder",
      "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
      "key": "shift+alt+f",
      "command": "workbench.files.action.focusFilesExplorer"
  },
  {
      "key": "shift+alt+g",
      "command": "workbench.view.scm",
      "when": "workbench.scm.active"
  },
  {
      "key": "ctrl+shift+g",
      "command": "-workbench.view.scm",
      "when": "workbench.scm.active"
  },
  {
      "key": "ctrl+c",
      "command": "-workbench.action.terminal.sendSequence",
      "when": "terminalFocus"
  },
  {
      "key": "ctrl+c",
      "command": "workbench.action.terminal.sendSequence",
      "args": {
          "text": "\u0003"
      },
      "when": "terminalFocus"
  }
]